use std::fs;
use std::path::Path;
use clap::Parser;
use tokio::fs as tokio_fs;

/// –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
#[derive(Parser, Debug)]
#[command(author, version, about)]
struct Args {
    /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    #[arg(short, long)]
    file: String,

    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    #[arg(short, long, default_value_t = false)]
    async_mode: bool,
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
struct FileStats {
    lines: usize,
    words: usize,
    chars: usize,
}

impl FileStats {
    fn new() -> Self {
        FileStats {
            lines: 0,
            words: 0,
            chars: 0,
        }
    }
}

/// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
fn process_file_sync(path: &Path) -> Result<FileStats, std::io::Error> {
    let content = fs::read_to_string(path)?;
    let mut stats = FileStats::new();

    for line in content.lines() {
        stats.lines += 1;
        stats.words += line.split_whitespace().count();
        stats.chars += line.chars().count();
    }

    Ok(stats)
}

/// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
async fn process_file_async(path: &Path) -> Result<FileStats, std::io::Error> {
    let content = tokio_fs::read_to_string(path).await?;
    let mut stats = FileStats::new();

    for line in content.lines() {
        stats.lines += 1;
        stats.words += line.split_whitespace().count();
        stats.chars += line.chars().count();
    }

    Ok(stats)
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();
    let path = Path::new(&args.file);

    if !path.exists() {
        eprintln!("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        std::process::exit(1);
    }

    let stats = if args.async_mode {
        println!("üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º...");
        process_file_async(path).await?
    } else {
        println!("ü¶Ä –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º...");
        process_file_sync(path)?
    };

    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞ '{}':", args.file);
    println!("‚ûñ –°—Ç—Ä–æ–∫: {}", stats.lines);
    println!("‚ûñ –°–ª–æ–≤: {}", stats.words);
    println!("‚ûñ –°–∏–º–≤–æ–ª–æ–≤: {}", stats.chars);

    Ok(())
}